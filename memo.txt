working directory   :   工作目錄
staging area        :   索引
Local Repository    :   本地數據庫(儲存庫)
Remote Repository   :   遠端數據庫(儲存庫)
VCS                 :   版本控制系统
CVCS                :   集中化的版本控制系統  如TFS
DVCS                :   分散式版本控制系统    如Git
Untracked           :   未追蹤
UnModified          :   未修改
Modified            :   已修改
Staged              :   已加入索引
HEAD                :   目前使用的commit節點或分支
快轉                :   目前分支的commit節點因Merge往下個commit節點前進
master              :   預設的分支名稱
========================================
1.git --version
    檢查版本別，測試安裝是否成功。
2.cd
    普通cmd指令，可移動到指定資料夾位置，位置可用實體檔案拖曳方式。
3.git config --global user.name "000310"
  git config --global user.name "使用者名稱"
    設定使用者名稱
4.git config --global user.email "systemweb00031@gmail.com"
  git config --global user.email "使用者Email"
    設定使用者Email
5.git config --list
    檢查Config內容
    ※Config存在 C:\Users\<使用者名稱>\.gitconfig 內。
6.git init
    建立數據庫(儲存庫)
    ※先確認cd已移動要建立數據庫(Repository)的位置再執行
    在本地端執行就是建立本地數據庫，在GitHub上New Repository就是相當於在GitHub這台伺服器上執行git init，產生遠端數據庫。
7.git status
    確認目前資料夾內變化的狀態
8.git add .
    將資料新增到索引
    ※「.」相當於這層資料夾的意思，就是全部
    ※也可以add 檔名.副檔名
9.git commit -m "新增文件"
  git commit -m "註解內容comment等等"
    將索引提交至本機數據庫，類似暫簽但意義不同，相當於本地端的簽入。
10.git log
    查看本機數據庫目前有哪些版本更新紀錄
    ※退出按q
11.git config --global alias.st status
    設定全域 自訂縮寫 st 等同 status。之後就可以下git st當作git stauts用。


12.git remote add origin https://github.com/000310/test.git
   git remote add <遠端數據庫的代稱> <遠端數據庫Https or SSH>
    建立(註冊)本機端數據庫連線(動詞)到遠端數據庫的連線(名詞)，詳見:[初始化遠端數據庫]二、本地端有數據庫
13.git branch -M main
    在本地數據庫建立一條分支(branch)叫做main
14.git push -u origin main
   git push [-u] <遠端數據庫> <分支名稱>
   git push
    上傳(Push)本地數據庫至指定的遠端數據庫(origin)底下的分支(Main)，相當於Merge、遠端的簽入。
    使用過-u之後，只要用git push就會推到上次使用-u指令的遠端數據庫。
15.git checkout 8cbd7e0
   git checkout <commit編號>
    跳到指定的commit節點，HEAD也會指向該commit節點，SorceTree上的動作是點兩下該commit節點，類似GetSpecialCode。
   git checkout master
    取得master所在的commit節點，等同回到最新的狀態。詳見:第20的語法
   git checkout -- <檔案名稱>
    還原目前修改的檔案，相當於Undo，取得指定檔案覆寫現有檔案
16.git clean -n
    查詢可刪除本地數據庫中未追蹤的檔案清單
    (不常用指令)
17.git clean -f
    刪除本地數據庫中未追蹤的檔案，搭配checkout master可以讓資料夾內的結構、檔案狀態完全同最後一版
    (不常用指令)
18.git reset HEAD
    將加入索引的檔案還原到工作目錄。


19.git branch develop
   git branch <新分支名稱>
    建立新的分支
   git branch
    查看目前所有的分支，q 離開畫面。
   *git branch -d <分支名稱>
    刪除分支
   *git branch -D <分支名稱>
    強制刪除分支
   *git branch <新分支名稱> commit <commit編號)
    給指定commit節點產生分支。
20.git checkout develop
   git checkout <分支名稱>
    切換使用的分支，同時檔案狀態會切到該分支的commit，HEAD 也會跟著指向到該分支。

21.git merge develop
   git merge <目標分支>
    ※以下解釋是以TFS的觀點說明的，正確的說法請看※※之後的說明。
    使將目前的分支產生同目標分支一樣的commit節點，等同目前分支重複目標分支所做過的一切動作，如同快轉一樣，故也稱快轉、快進式Merge。
    例：
        假設目前有4個commit，X = 目前分支； Y = 目標分支
        X = 節點3； Y = 節點4
        HEAD => X (HEAD指向X)
        執行完git merger Y後 HEAD => X = 節點4 = Y
    以SW為例，如同開發線改完了，主線自己也重做一樣的程式碼簽出、調整並簽入，
        測試線有多少筆ChangeSet，正式區就簽出、簽入幾次。
    快進模式的前提，目前分支的節點狀態與目標分支無分歧(即只有一條線，目前分支的所有Commit，目標分支都有)，
        若不能達成快進模式則同--no-ff一樣，會另建一的Commit，詳見git merge <目標分支> --no-ff。
22.git merge develop --no-ff
   git merge <目標分支> --no-ff
    取消快轉機制的Merge，會再產生一個commit節點，此節點紀錄兩邊分支的合併並將目前分支的位置到這個的節點上，目標分支位置不變，
        因為是新產生的commit節點，所以會要求輸入註解說明(Comment)。
    以SW為例，如同一般TFS上的Merge作法，開發線多筆的ChangeSet Merge到主線時，
        主線的檔案會呈現多個檔案的簽出並一次性簽入，產出1筆ChangeSet，
        該筆ChangeSet會記錄中間的所有差異(調整)。
*23.git log -online -graph
    觀看線圖
*24.git reset -hard ORIG_HEAD
    還原合併前狀態
    git reset HEAD^
    還原上個版本，一個「^」等於倒回一個版本，「^^」等於倒回2個版本。
    git reset HEAD^
    「~<num>」倒回幾個版本。
*25.git merge --abort
    取消merge衝突狀態


================================================================================
Branch & Merge 觀念教學練習網站
https://learngitbranching.js.org/?locale=zh_TW
================================================================================
[初始化遠端數據庫]
建立遠端數據庫後有兩種方法初始化
以下以GitHub New Repository 取名test為例
一、本地端無數據庫
(先cd到目標資料夾)
git init                本地端建立並初始化一個數據庫(產生.git資料夾)
git branch -M main      分支(Branch)出一條主線(-M)取名為main(主線本身也是一條支線，而其他支線則是由主線再切出來的分支)
接著走下面，有本地數據庫的操作

二、本地端有數據庫
git remote add origin <遠端數據庫Https or SSH>               遠端指令(remote)，新增(add)一條遠端連線，該連線取名為"origin"，對應的URL為<遠端數據Https or SSH>
git branch -M main                                           建立一條分支(branch)叫做main
git push -u origin main                                      上傳(Push) -u(set-upstream的意思，用途設定"預設"Push到哪個遠端數據庫)，指定更新的遠端數據庫為origin底下的Main分支

※根據cd的位置判斷同一個本地端數據庫可以連線到多個遠端數據庫，但是連線的對應名稱不可重複
本地數據庫      |對應名稱(存在.git/Config裡)     |遠端數據庫    |用途
桌面\project    |origin                          |Github0920    |正式區伺服器
桌面\project    |test                            |test          |測試區伺服器
桌面\project    |bit                             |Github0920    |在Bitbucket正式區伺服器
桌面\project2   |origin                          |project2      |別的伺服器
(TFS是像一個大哥底下幾個小弟，小弟底下又有其他小弟，像樹狀圖一樣，
 但是Git可以一個小弟有多的大哥，類似Host，
 只要網域名取的不一樣，可以指向相同IP或不同IP，
 但Git限制不可以一個網域名對應到多個IP，所以對應名稱不能重複
)

[README.md]
補充說明README文件
在GitHub、GitLab、Bitbucket上新增數據庫時都會問你要不要產生這個檔案
功用是類似於協同作業的公告，檔案採用.md的格式，可用於說明這個專案是幹嘛的或當作更新改版的紀錄及協同作業的注意事項等等。
好比建一個 說明.txt，所以此檔案可加可不加，通常是不用加，但與陌生人協作可能有用。
================================================================================
[Remote & SSH Key](ToDo:現在觀念還不穩，先學好目標的Git再回頭來補SSH Key的知識)
GitHub提供兩種遠端連線方式
一、Https
這種模式不需要產SSH，而是以網址的方式連上GitHub來存取遠端數據庫，當資料要Push時，會出現彈出視窗要求登入GitHub的帳密。
(待確認)但不確是否因為GitHub的設定是公開還是SourceTree有紀錄自動驗證，使用SourceTree時沒有詢問帳密，或是登入過一次就不用再填了。

二、SSH Key (http://zhengda.github.io/2016/05/05/git-puttykeyfile-兩三事/)
利用產出公、私金鑰的方式來取代帳密登入，產出金鑰有兩種方法
預設存放位置：C:\Users\Administrator\.ssh
Passphrase ：私鑰的密碼，可設可不設，有別於帳號的密碼是私鑰本身自己的密碼，至少9碼，有設定時在登入時須Key私鑰的密碼，安全性更高，避免私鑰被盜直接登入，缺點要記更多組密碼。

1.ssh-keygen
GitHub官網教的是這種方法
公鑰的檔名<檔名.pub> 例：id_ed25519.pub
私鑰的檔名<檔名> 例：id_ed25519

2.PuTTY Key(https://ithelp.ithome.com.tw/articles/10080136)
SourceTree的Tool有提供產SSH Key的方法，產出來的叫PuTTY Key，產出(Generate)時需要不停移動滑鼠直到產生完畢。(可能是利用滑鼠軌跡來產生類似筆跡或指紋這樣不重複的Key)
用這個產生的Key還要去設定開機時啟動pageant.exe還是SSH-agent啥的，目前是嘗試失敗，SSH Key本身就祐是一門知識。
公鑰的檔名<檔名.pub> 例：id_ed25519.pub
私鑰的檔名<檔名.ppk> 例：id_ed25519.ppk

